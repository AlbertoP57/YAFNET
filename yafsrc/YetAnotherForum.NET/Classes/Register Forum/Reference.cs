//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
#pragma warning disable 1591

namespace YAF.RegisterForum
{
  #region Using

  using System;
  using System.CodeDom.Compiler;
  using System.ComponentModel;
  using System.Diagnostics;
  using System.Threading;
  using System.Web.Services;
  using System.Web.Services.Description;
  using System.Web.Services.Protocols;

  using YAF.Classes.Pattern;

  #endregion

  /// <summary>
  /// The register.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  [DebuggerStepThrough]
  [DesignerCategory("code")]
  [WebServiceBinding(Name = "RegisterSoap", Namespace = "http://yetanotherforum.net/Register")]
  public class Register : SoapHttpClientProtocol
  {
    #region Constants and Fields

    /// <summary>
    ///   The latest version date operation completed.
    /// </summary>
    private SendOrPostCallback LatestVersionDateOperationCompleted;

    /// <summary>
    ///   The latest version operation completed.
    /// </summary>
    private SendOrPostCallback LatestVersionOperationCompleted;

    /// <summary>
    ///   The register forum operation completed.
    /// </summary>
    private SendOrPostCallback RegisterForumOperationCompleted;

    /// <summary>
    ///   The use default credentials set explicitly.
    /// </summary>
    private bool useDefaultCredentialsSetExplicitly;

    #endregion

    #region Constructors and Destructors

    /// <summary>
    ///   Initializes a new instance of the <see cref = "Register" /> class. 
    ///   The register.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public Register()
    {
      this.Url = "http://yetanotherforum.net/Register.asmx";
      if (this.IsLocalFileSystemWebService(this.Url))
      {
        this.UseDefaultCredentials = true;
        this.useDefaultCredentialsSetExplicitly = false;
      }
      else
      {
        this.useDefaultCredentialsSetExplicitly = true;
      }
    }

    #endregion

    #region Events

    /// <summary>
    ///   The latest version completed.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public event LatestVersionCompletedEventHandler LatestVersionCompleted;

    /// <summary>
    ///   The latest version date completed.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public event LatestVersionDateCompletedEventHandler LatestVersionDateCompleted;

    /// <summary>
    ///   The register forum completed.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public event RegisterForumCompletedEventHandler RegisterForumCompleted;

    #endregion

    #region Properties

    /// <summary>
    ///   Gets or sets Url.
    /// </summary>
    public new string Url
    {
      get
      {
        return base.Url;
      }

      set
      {
        if ((this.IsLocalFileSystemWebService(base.Url) && (this.useDefaultCredentialsSetExplicitly == false)) &&
            (this.IsLocalFileSystemWebService(value) == false))
        {
          base.UseDefaultCredentials = false;
        }

        base.Url = value;
      }
    }

    /// <summary>
    ///   Gets or sets a value indicating whether UseDefaultCredentials.
    /// </summary>
    public new bool UseDefaultCredentials
    {
      get
      {
        return base.UseDefaultCredentials;
      }

      set
      {
        base.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
      }
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// The begin latest version.
    /// </summary>
    /// <param name="callback">
    /// The callback.
    /// </param>
    /// <param name="asyncState">
    /// The async State.
    /// </param>
    /// <remarks>
    /// </remarks>
    [NotNull]
    public IAsyncResult BeginLatestVersion([NotNull] AsyncCallback callback, [NotNull] object asyncState)
    {
      return this.BeginInvoke("LatestVersion", new object[0], callback, asyncState);
    }

    /// <summary>
    /// The begin latest version date.
    /// </summary>
    /// <param name="callback">
    /// The callback.
    /// </param>
    /// <param name="asyncState">
    /// The async State.
    /// </param>
    /// <remarks>
    /// </remarks>
    [NotNull]
    public IAsyncResult BeginLatestVersionDate([NotNull] AsyncCallback callback, [NotNull] object asyncState)
    {
      return this.BeginInvoke("LatestVersionDate", new object[0], callback, asyncState);
    }

    /// <summary>
    /// The begin register forum.
    /// </summary>
    /// <param name="id">
    /// The id.
    /// </param>
    /// <param name="name">
    /// The name.
    /// </param>
    /// <param name="address">
    /// The address.
    /// </param>
    /// <param name="callback">
    /// The callback.
    /// </param>
    /// <param name="asyncState">
    /// The async State.
    /// </param>
    /// <remarks>
    /// </remarks>
    [NotNull]
    public IAsyncResult BeginRegisterForum(
      long id, [NotNull] string name, [NotNull] string address, [NotNull] AsyncCallback callback, [NotNull] object asyncState)
    {
      return this.BeginInvoke("RegisterForum", new object[] { id, name, address }, callback, asyncState);
    }

    /// <summary>
    /// The cancel async.
    /// </summary>
    /// <param name="userState">
    /// The user State.
    /// </param>
    /// <remarks>
    /// </remarks>
    public new void CancelAsync([NotNull] object userState)
    {
      base.CancelAsync(userState);
    }

    /// <summary>
    /// The end latest version.
    /// </summary>
    /// <param name="asyncResult">
    /// The async Result.
    /// </param>
    /// <remarks>
    /// </remarks>
    /// <returns>
    /// The end latest version.
    /// </returns>
    public long EndLatestVersion([NotNull] IAsyncResult asyncResult)
    {
      object[] results = this.EndInvoke(asyncResult);
      return (long)results[0];
    }

    /// <summary>
    /// The end latest version date.
    /// </summary>
    /// <param name="asyncResult">
    /// The async Result.
    /// </param>
    /// <remarks>
    /// </remarks>
    public DateTime EndLatestVersionDate([NotNull] IAsyncResult asyncResult)
    {
      object[] results = this.EndInvoke(asyncResult);
      return (DateTime)results[0];
    }

    /// <summary>
    /// The end register forum.
    /// </summary>
    /// <param name="asyncResult">
    /// The async Result.
    /// </param>
    /// <remarks>
    /// </remarks>
    /// <returns>
    /// The end register forum.
    /// </returns>
    public long EndRegisterForum([NotNull] IAsyncResult asyncResult)
    {
      object[] results = this.EndInvoke(asyncResult);
      return (long)results[0];
    }

    /// <summary>
    /// The latest version.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <returns>
    /// The latest version.
    /// </returns>
    [SoapDocumentMethod("http://yetanotherforum.net/Register/LatestVersion", 
      RequestNamespace = "http://yetanotherforum.net/Register", 
      ResponseNamespace = "http://yetanotherforum.net/Register", Use = SoapBindingUse.Literal, 
      ParameterStyle = SoapParameterStyle.Wrapped)]
    public long LatestVersion()
    {
      object[] results = this.Invoke("LatestVersion", new object[0]);
      return (long)results[0];
    }

    /// <summary>
    /// The latest version async.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public void LatestVersionAsync()
    {
      this.LatestVersionAsync(null);
    }

    /// <summary>
    /// The latest version async.
    /// </summary>
    /// <param name="userState">
    /// The user State.
    /// </param>
    /// <remarks>
    /// </remarks>
    public void LatestVersionAsync([NotNull] object userState)
    {
      if (this.LatestVersionOperationCompleted == null)
      {
        this.LatestVersionOperationCompleted = new SendOrPostCallback(this.OnLatestVersionOperationCompleted);
      }

      this.InvokeAsync("LatestVersion", new object[0], this.LatestVersionOperationCompleted, userState);
    }

    /// <summary>
    /// The latest version date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [SoapDocumentMethod("http://yetanotherforum.net/Register/LatestVersionDate", 
      RequestNamespace = "http://yetanotherforum.net/Register", 
      ResponseNamespace = "http://yetanotherforum.net/Register", Use = SoapBindingUse.Literal, 
      ParameterStyle = SoapParameterStyle.Wrapped)]
    public DateTime LatestVersionDate()
    {
      object[] results = this.Invoke("LatestVersionDate", new object[0]);
      return (DateTime)results[0];
    }

    /// <summary>
    /// The latest version date async.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public void LatestVersionDateAsync()
    {
      this.LatestVersionDateAsync(null);
    }

    /// <summary>
    /// The latest version date async.
    /// </summary>
    /// <param name="userState">
    /// The user State.
    /// </param>
    /// <remarks>
    /// </remarks>
    public void LatestVersionDateAsync([NotNull] object userState)
    {
      if (this.LatestVersionDateOperationCompleted == null)
      {
        this.LatestVersionDateOperationCompleted = new SendOrPostCallback(this.OnLatestVersionDateOperationCompleted);
      }

      this.InvokeAsync("LatestVersionDate", new object[0], this.LatestVersionDateOperationCompleted, userState);
    }

    /// <summary>
    /// The register forum.
    /// </summary>
    /// <param name="id">
    /// The id.
    /// </param>
    /// <param name="name">
    /// The name.
    /// </param>
    /// <param name="address">
    /// The address.
    /// </param>
    /// <remarks>
    /// </remarks>
    /// <returns>
    /// The register forum.
    /// </returns>
    [SoapDocumentMethod("http://yetanotherforum.net/Register/RegisterForum", 
      RequestNamespace = "http://yetanotherforum.net/Register", 
      ResponseNamespace = "http://yetanotherforum.net/Register", Use = SoapBindingUse.Literal, 
      ParameterStyle = SoapParameterStyle.Wrapped)]
    public long RegisterForum(long id, [NotNull] string name, [NotNull] string address)
    {
      object[] results = this.Invoke("RegisterForum", new object[] { id, name, address });
      return (long)results[0];
    }

    /// <summary>
    /// The register forum async.
    /// </summary>
    /// <param name="id">
    /// The id.
    /// </param>
    /// <param name="name">
    /// The name.
    /// </param>
    /// <param name="address">
    /// The address.
    /// </param>
    /// <remarks>
    /// </remarks>
    public void RegisterForumAsync(long id, [NotNull] string name, [NotNull] string address)
    {
      this.RegisterForumAsync(id, name, address, null);
    }

    /// <summary>
    /// The register forum async.
    /// </summary>
    /// <param name="id">
    /// The id.
    /// </param>
    /// <param name="name">
    /// The name.
    /// </param>
    /// <param name="address">
    /// The address.
    /// </param>
    /// <param name="userState">
    /// The user State.
    /// </param>
    /// <remarks>
    /// </remarks>
    public void RegisterForumAsync(long id, [NotNull] string name, [NotNull] string address, [NotNull] object userState)
    {
      if (this.RegisterForumOperationCompleted == null)
      {
        this.RegisterForumOperationCompleted = new SendOrPostCallback(this.OnRegisterForumOperationCompleted);
      }

      this.InvokeAsync(
        "RegisterForum", new object[] { id, name, address }, this.RegisterForumOperationCompleted, userState);
    }

    #endregion

    #region Methods

    /// <summary>
    /// The is local file system web service.
    /// </summary>
    /// <param name="url">
    /// The url.
    /// </param>
    /// <returns>
    /// The is local file system web service.
    /// </returns>
    private bool IsLocalFileSystemWebService([NotNull] string url)
    {
      if (string.IsNullOrEmpty(url))
      {
        return false;
      }

      var wsUri = new Uri(url);
      if ((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0))
      {
        return true;
      }

      return false;
    }

    /// <summary>
    /// The on latest version date operation completed.
    /// </summary>
    /// <param name="arg">
    /// The arg.
    /// </param>
    private void OnLatestVersionDateOperationCompleted([NotNull] object arg)
    {
      if (this.LatestVersionDateCompleted != null)
      {
        var invokeArgs = (InvokeCompletedEventArgs)(arg);
        this.LatestVersionDateCompleted(
          this, 
          new LatestVersionDateCompletedEventArgs(
            invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }

    /// <summary>
    /// The on latest version operation completed.
    /// </summary>
    /// <param name="arg">
    /// The arg.
    /// </param>
    private void OnLatestVersionOperationCompleted([NotNull] object arg)
    {
      if (this.LatestVersionCompleted != null)
      {
        var invokeArgs = (InvokeCompletedEventArgs)(arg);
        this.LatestVersionCompleted(
          this, 
          new LatestVersionCompletedEventArgs(
            invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }

    /// <summary>
    /// The on register forum operation completed.
    /// </summary>
    /// <param name="arg">
    /// The arg.
    /// </param>
    private void OnRegisterForumOperationCompleted([NotNull] object arg)
    {
      if (this.RegisterForumCompleted != null)
      {
        var invokeArgs = (InvokeCompletedEventArgs)(arg);
        this.RegisterForumCompleted(
          this, 
          new RegisterForumCompletedEventArgs(
            invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }

    #endregion
  }

  /// <summary>
  /// The register forum completed event handler.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  public delegate void RegisterForumCompletedEventHandler(object sender, RegisterForumCompletedEventArgs e);

  /// <summary>
  /// The register forum completed event args.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  [DebuggerStepThrough]
  [DesignerCategory("code")]
  public class RegisterForumCompletedEventArgs : AsyncCompletedEventArgs
  {
    #region Constants and Fields

    /// <summary>
    ///   The results.
    /// </summary>
    private readonly object[] results;

    #endregion

    #region Constructors and Destructors

    /// <summary>
    /// Initializes a new instance of the <see cref="RegisterForumCompletedEventArgs"/> class.
    /// </summary>
    /// <param name="results">
    /// The results.
    /// </param>
    /// <param name="exception">
    /// The exception.
    /// </param>
    /// <param name="cancelled">
    /// The cancelled.
    /// </param>
    /// <param name="userState">
    /// The user state.
    /// </param>
    internal RegisterForumCompletedEventArgs([NotNull] object[] results, [NotNull] Exception exception, bool cancelled, [NotNull] object userState)
      : base(exception, cancelled, userState)
    {
      this.results = results;
    }

    #endregion

    #region Properties

    /// <summary>
    ///   The result.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public long Result
    {
      get
      {
        this.RaiseExceptionIfNecessary();
        return (long)this.results[0];
      }
    }

    #endregion
  }

  /// <summary>
  /// The latest version completed event handler.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  public delegate void LatestVersionCompletedEventHandler(object sender, LatestVersionCompletedEventArgs e);

  /// <summary>
  /// The latest version completed event args.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  [DebuggerStepThrough]
  [DesignerCategory("code")]
  public class LatestVersionCompletedEventArgs : AsyncCompletedEventArgs
  {
    #region Constants and Fields

    /// <summary>
    ///   The results.
    /// </summary>
    private readonly object[] results;

    #endregion

    #region Constructors and Destructors

    /// <summary>
    /// Initializes a new instance of the <see cref="LatestVersionCompletedEventArgs"/> class.
    /// </summary>
    /// <param name="results">
    /// The results.
    /// </param>
    /// <param name="exception">
    /// The exception.
    /// </param>
    /// <param name="cancelled">
    /// The cancelled.
    /// </param>
    /// <param name="userState">
    /// The user state.
    /// </param>
    internal LatestVersionCompletedEventArgs([NotNull] object[] results, [NotNull] Exception exception, bool cancelled, [NotNull] object userState)
      : base(exception, cancelled, userState)
    {
      this.results = results;
    }

    #endregion

    #region Properties

    /// <summary>
    ///   The result.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public long Result
    {
      get
      {
        this.RaiseExceptionIfNecessary();
        return (long)this.results[0];
      }
    }

    #endregion
  }

  /// <summary>
  /// The latest version date completed event handler.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  public delegate void LatestVersionDateCompletedEventHandler(object sender, LatestVersionDateCompletedEventArgs e);

  /// <summary>
  /// The latest version date completed event args.
  /// </summary>
  /// <remarks>
  /// </remarks>
  [GeneratedCode("System.Web.Services", "2.0.50727.42")]
  [DebuggerStepThrough]
  [DesignerCategory("code")]
  public class LatestVersionDateCompletedEventArgs : AsyncCompletedEventArgs
  {
    #region Constants and Fields

    /// <summary>
    ///   The results.
    /// </summary>
    private readonly object[] results;

    #endregion

    #region Constructors and Destructors

    /// <summary>
    /// Initializes a new instance of the <see cref="LatestVersionDateCompletedEventArgs"/> class.
    /// </summary>
    /// <param name="results">
    /// The results.
    /// </param>
    /// <param name="exception">
    /// The exception.
    /// </param>
    /// <param name="cancelled">
    /// The cancelled.
    /// </param>
    /// <param name="userState">
    /// The user state.
    /// </param>
    internal LatestVersionDateCompletedEventArgs([NotNull] object[] results, [NotNull] Exception exception, bool cancelled, [NotNull] object userState)
      : base(exception, cancelled, userState)
    {
      this.results = results;
    }

    #endregion

    #region Properties

    /// <summary>
    ///   The result.
    /// </summary>
    /// <remarks>
    /// </remarks>
    public DateTime Result
    {
      get
      {
        this.RaiseExceptionIfNecessary();
        return (DateTime)this.results[0];
      }
    }

    #endregion
  }
}

#pragma warning restore 1591